name: Release

# Configure your build and release platforms
env:
  # If your repo name differs from your binary name, change it.
  # Check you Cargo.toml -> package -> name
  binary: ${{ github.event.repository.name }}

  # Releases

  # Valid platforms: "github_releases, itchio, github_pages"
  # - For brevity you can write: "releases, itchio, pages"
  publish_to: "github_releases"

permissions:
  # To upload files to GitHub Releases
  contents: write
  # To deploy to Pages
  pages: write
  # To verify the deployment originates from an appropriate source
  id-token: write

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Add tag version: (e.g. -> v3.6.1)"
        required: true
        type: string
      build_for:
        description: "Build for:"
        default: linux,windows,macos
      publish_to:
        description: "Publish to:"
        default: github_releases
  release:
    types: [published]


jobs:
  # Load variables
  load-env:
    runs-on: ubuntu-latest
    steps:
      - id: get_version
        uses: olegtarasov/get-tag@v2.1.2

    outputs:
      run_build_linux: ${{ (inputs.tag && contains(inputs.build_for, 'linux')) || (!inputs.tag && contains(env.build_for, 'linux') ) }}
      run_build_windows: ${{ ( inputs.tag && contains(inputs.build_for, 'windows')) || (!inputs.tag && contains(env.build_for, 'windows') ) }}
      run_build_macos_intel:  ${{ ( inputs.tag && ( contains(inputs.build_for, 'intel') || contains(inputs.build_for, 'macos') )) || (!inputs.tag && (contains(env.build_for, 'intel') || contains(env.build_for, 'macos')) ) }}
      run_build_macos_apple_silicon: ${{ ( inputs.tag && ( contains(inputs.build_for, 'apple') || contains(inputs.build_for, 'macos') )) || (!inputs.tag && (contains(env.build_for, 'apple') || contains(env.build_for, 'macos')) ) }}
      run_publish_github_releases: ${{ ( inputs.tag && contains(inputs.publish_to, 'releases')) || (!inputs.tag && contains(env.publish_to, 'releases') ) }}
      tag: ${{ ( inputs.tag || steps.get_version.outputs.tag ) }}
      binary: ${{ env.binary }}

  # Build for Linux x86_64
  build-linux:
    needs: load-env
    if: needs.load-env.outputs.run_build_linux == 'true'
    uses: ./.github/workflows/linux.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}

  # Build for Windows x86_64
  build-windows:
    needs: load-env
    if: needs.load-env.outputs.run_build_windows == 'true'
    uses: ./.github/workflows/windows.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}


  # Build for MacOS x86_64/ARM64
  build-macos:
    needs: load-env
    if: needs.load-env.outputs.run_build_macos_intel == 'true' || needs.load-env.outputs.run_build_macos_apple_silicon == 'true'
    uses: ./.github/workflows/macos.yaml
    name: build
    with:
      tag: ${{ needs.load-env.outputs.tag }}
      binary: ${{ needs.load-env.outputs.binary }}
      run_macos_intel: ${{ needs.load-env.outputs.run_build_macos_intel }}
      run_macos_apple_silicon: ${{ needs.load-env.outputs.run_build_macos_apple_silicon }}

  # Create release
  create_release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: artifacts/linux

      - name: Download macos_apple_silicon artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_apple_silicon
          path: artifacts/macos_apple_silicon

      - name: Download macos_intel artifact
        uses: actions/download-artifact@v4
        with:
          name: macos_intel
          path: artifacts/macos_intel

      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: windows
          path: artifacts/windows

      - name: Upload Compiled PDFs as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: builds
          path: artifacts/

      - name: Release
        uses: ncipollo/release-action@v1.14.0
        if: github.event_name == 'release'
        with:
          artifacts: "artifacts/*"
          allowUpdates: true
          omitNameDuringUpdate: true
          omitBodyDuringUpdate: true
